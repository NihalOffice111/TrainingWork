{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Online C++ compiler to run C++ program online\
#include <iostream>\
#include <stdexcept>\
using namespace std;\
\
template <typename T>\
class Vector\{\
    private:\
    T* data;  //pointer to data array\
    size_t capacity;  //Current allocated capacity. The total capacity allocated to the vector, which determines when it needs resizing\
    size_t size;  //current number of elements. Keeps track of the number of elements currently in the vecto\
    \
    //Resizes the array when it reaches capacity. resize allocates a new array with a specified capacity, copies existing elements to it, and deletes the old array.\
    //Initializes size to 0 and capacity to 1 and allocates memory for one element.\
    void resize(size_t newCapacity)\
    \{\
        T* newData = new T(newCapacity);\
        cout<<"newData " << *newData << endl;\
        \
        for(size_t i=0; i<size; i++)\
        \{\
            newData[i] = data[i]; // Copy data to new array\
        \}\
        delete[] data; //free old memory\
        data = newData;\
        capacity = newCapacity;\
        \
    \}\
    \
    public:\
    //Constructor\
    Vector() : data(nullptr), capacity(0), size(0)\{\
    \}\
    \
    ~Vector()\
    \{\
        delete[] data;\
    \}\
    \
    //return the current size of the vector\
    size_t getSize() const\
    \{\
        return size;\
    \}\
    \
    // Return current capacity of the vector\
    size_t getCapacity() const \{\
        return capacity;\
    \}\
\
    \
    //check if the vector is empty\
    bool isEmpty() const\
    \{\
        return size == 0;\
    \}\
    \
    //adds an element to the end of the vector\
    //Adds a new element at the end of the vector. If the vector is full, it doubles its capacity before adding the new element\
    void push_back(const T& value)\
    \{\
        if(size == capacity)\
        \{\
            resize(capacity == 0 ? 1: capacity * 2);\
        \}\
        data[size++] = value;\
    \}\
    \
    //remove the last element of the vector by  decrementing size.\
    void pop_back()\
    \{\
        if(isEmpty())\
        \{\
            throw out_of_range("Vector is empty");\
        \}\
        --size;\
    \}\
    \
    //access an element at the specified index\
    //Provides access to elements by index. It throws an out_of_range exception if the index is out of bounds.\
    T& operator[](size_t index)\
    \{\
        if(index >= size)\
        \{\
            throw out_of_range("Index out of range");\
        \}\
        return data[index];\
    \}\
    \
    const T& operator[](size_t index)const\
    \{\
        if(index >= size)\
        \{\
            throw out_of_range("Index out of bounds");\
        \}\
        return data[index];\
    \}\
    \
    //clear vector\
    // Resets the vector by setting size to 0, effectively \'93clearing\'94 the vector without releasing the allocated memory.\
    void clear()\
    \{\
        size = 0;\
    \}\
    \
    //at() with bounds checking\
    T& at(size_t index)\
    \{\
        if (index >= size)\
        \{\
            throw out_of_range("Index out of range");\
        \}\
        return data[index];\
    \}\
    \
    const T& at(size_t index)const\
    \{\
        if (index >= size)\
        \{\
            throw out_of_range("Index out of range");\
        \}\
        return data[index];\
    \}\
    \
    void erase(size_t index)\
    \{\
        if(index >= size)\
        \{\
            throw out_of_range("Index out of range");\
        \}\
        for(size_t i = index; i<size -1; ++i)\
        \{\
            data[i] = data[i+1];\
        \}\
        --size;\
    \}\
    \
    void reserve(size_t newSize)\
    \{\
        if(newSize > capacity)\
        \{\
            resize(newSize);\
        \}\
    \}\
\};\
\
int main() \{\
    Vector<int> vec;\
\
    // Adding elements\
    vec.push_back(10);\
    vec.push_back(20);\
    vec.push_back(30);\
\
    try\
    \{\
        // Accessing elements\
        cout << "Vector elements: ";\
        for (size_t i = 0; i < vec.getSize(); ++i) \{\
            cout << vec[i] << " ";\
        \}\
        cout << endl;\
        cout<<"Vector at: " <<vec.at(2) <<endl;\
        // Display size and capacity\
        cout << "Size: " << vec.getSize() << endl;\
        cout << "Capacity: " << vec.getCapacity() << endl;\
    \
        // Remove an element\
        vec.pop_back();\
        std::cout << "After pop_back, Size: " << vec.getSize() << std::endl;\
    \
        // Access elements using overloaded operator\
        std::cout << "Element at index 1: " << vec[1] << std::endl;\
    \}\
    catch(const out_of_range e)\
    \{\
        cerr<<"Error: "<< e.what() << endl;\
    \}\
    return 0;\
\}}
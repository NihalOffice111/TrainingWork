{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <iostream>\
#include <string>\
#include <vector>\
#include <set>\
#include <algorithm>\
#include <exception>\
using namespace std;\
\
class MyException: public exception\
\{\
    private:\
    string  message;\
    public:\
    explicit MyException(const string msg): message(msg)\{\}\
    //override what()\
    const char* what() const noexcept override\
    \{\
        return message.c_str();\
    \}\
\};\
\
class BankAccount\
\{\
    private:\
    string name;\
    double balance;\
    \
    public:\
    BankAccount(const string accholder, double initialbal):\
        name(accholder),  balance(initialbal)\{\}\
    \
    \
    void deposit(double amount)\
    \{\
        if(amount >0 )\
        \{\
            balance += amount;\
        \}\
        else\
        \{\
            throw MyException("Insufficient funds");\
        \}\
    \}\
    \
    void withdraw(double amount)\
    \{\
        if(amount > 0 && amount <= balance)\
        \{\
            balance -= amount;\
        \}\
        else\
        \{\
            throw MyException("Insufficient funds");\
        \}\
    \}\
    \
    void displayAccountInfo() const\
    \{\
        cout<<"Customer Name: "<< name<< endl;\
        cout<<"Account balance: "<< balance<< endl;\
    \}\
    \
    double getBalance() const\
    \{\
        return balance;\
    \}\
    \
    void applyInterest(double rate) \
    \{\
        balance += balance *rate;\
    \}\
    \
   /* bool operator==(const BankAccount& bank)const\
    \{\
        return accountnumber == bank.accountnumber;\
    \}\
    \
    bool operator<(const BankAccount& bank)const\
    \{\
        return accountnumber < bank.accountnumber;\
    \}*/\
\};\
\
//Function to display all accounts in a vector\
void displayAccounts(const vector<BankAccount>& accounts)\
\{\
    for(const auto& account: accounts)\
    \{\
        account.displayAccountInfo();\
        cout<<"-------------------------------"<<endl;\
    \}\
\}\
\
class ApplyInterest\
\{\
    private:\
    double interestRate;\
    public:\
    explicit ApplyInterest(double rate) : interestRate(rate)\{\}\
    \
    //overload () operator to make this a functor\
    void operator()(BankAccount& account)const\
    \{\
        account.applyInterest(interestRate);\
    \}\
\};\
\
\
int main()\
\{\
    vector<BankAccount> accounts = \{\
        BankAccount("ABCD", 10000.0),\
        BankAccount("John", 50000.0),\
        BankAccount("David", 100.0),\
    \};\
    cout<<"Initial Balance"<<endl;\
    for(const auto& account: accounts)\
    \{\
        account.displayAccountInfo();\
    \}\
    \
    ApplyInterest applyIntFunctor(0.05);\
    for_each(accounts.begin(), accounts.end(), applyIntFunctor);\
    cout<<" Balance after applying interest"<<endl;\
    for(const auto& account: accounts)\
    \{\
        account.displayAccountInfo();\
    \}\
    \
    return 0;\
\}}
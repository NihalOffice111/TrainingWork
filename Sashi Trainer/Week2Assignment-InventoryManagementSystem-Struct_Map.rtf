{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Online C++ compiler to run C++ program online\
#include <iostream>\
#include <string>\
#include <map>\
using namespace std;\
\
//Structure for inventory items\
struct Item\
\{\
    int itemId;\
    string itemName;\
    int quantity;\
    double price;\
    \
    Item(int _id = -1, string _name = "", int _quantity = 0, \
    double _price = 0.0) : itemId(_id), itemName(_name), quantity(_quantity), price(_price)\
    \{\}\
\};\
\
//Structure for Rack which contains items\
//Contains a map<int, Item> for storing maultiple items \
struct Rack\{\
    map<int, Item> items; //Map of items by ID  within each rack\
\};\
//Struct Bin contains a map<int, Rack> for storing maultiple Racks \
struct Bin\{\
    map<int, Rack> racks; //Map of racks by rack number within each bin\
\};\
//Struct Aisle contains a map<int, Bin> for storing maultiple Bins\
struct Aisle\{\
    map<int, Bin> bins; //map of bins by bin number within each aisle\
\};\
//Struct Warehouse contains a map<int, Aisle> for storing maultiple Aisles\
struct Warehouse\{\
    string wName;\
    map<int, Aisle> aisles; //map of aisles by aisle number within each warehouse\
\};\
\
//Inventory class using sparse arrays having add items, remove items, check stock, display inventory, transfer items, low stock alert functionality\
class InventorySystem\
\{\
    //Map tp store items at specified positions\
    //map<pair<int, int>, Item> inventory;\
    map<int, Warehouse> warehouses; //Map to store each warehouse by its id\
    int lowStockThreshhold = 10;\
    \
    public:\
    //Add / update item in a warehouse, aisle, bin, rack\
    void addUpdateItem(int wareId, int aisle, int bin, int rack, int id, string name, int qty, double price)\
    \{\
        //pair<int, int> position = make_pair(row, col);\
        warehouses[wareId].aisles[aisle].bins[bin].racks[rack].items[id] = Item(id, name, qty, price);\
        //inventory[position] = Item(id, name, qty, price);\
        cout<<"Item added / updated in warehouse ("<<wareId <<", Aisle "<<aisle<<", Bin "<<bin <<", Rack "<<rack<<endl;\
        checkLowStock(wareId, aisle, bin, rack, id);\
    \}\
    \
    //Remove item from specific warehouse, aisle, bin, rack\
    void removeItem(int wareId, int aisle, int bin, int rack, int id)\
    \{\
        if(warehouses[wareId].aisles[aisle].bins[bin].racks[rack].items.erase(id))\
        \{\
            cout<<"Item removed from warehouse ("<<wareId <<", Aisle "<<aisle<<", Bin "<<bin <<", Rack "<<rack<<endl;\
        \}\
        else\
        \{\
            cout<<"No item found in warehouse ("<<wareId <<", Aisle "<<aisle<<", Bin "<<bin <<", Rack "<<rack<<endl;\
        \}\
    \}\
    \
    //Check stock for an item at specified location\
    void checkStock(int wareId, int aisle, int bin, int rack, int id) const\
    \{\
        auto wareIt = warehouses.find(wareId);\
        if(wareIt == warehouses.end())\
        \{\
            cout<<"Warehouse "<<wareId <<" does not exist"<<endl;\
            return;\
        \}\
        const Warehouse& ware = wareIt->second;\
        //Check if aisle exist in warehouse\
        const auto& aisleIt = ware.aisles.find(aisle);\
        if(aisleIt == ware.aisles.end())\
        \{\
            cout<<"Aisle "<<aisle<<" does not exist in Warehouse "<<wareId<<endl;\
            return;\
        \}\
        //check if bin exists in aisle\
        const auto& binIt = aisleIt->second.bins.find(bin);\
        if(binIt == aisleIt->second.bins.end())\
        \{\
            cout<<"Bin "<<bin<<" does not exist in Aisle "<<aisle<<endl;\
            return;\
        \}\
        //check if rack exists in bin\
        const auto& rackIt = binIt->second.racks.find(rack);\
        if(rackIt == binIt->second.racks.end())\
        \{\
            cout<<"Rack "<<rack<<" does not exist in Bin "<<bin<<endl;\
            return;\
        \}\
        const auto& itemIt = rackIt->second.items.find(id);\
        if(itemIt == rackIt->second.items.end())\
        \{\
            const Item& item = itemIt->second;\
            cout<<"Stock in warehouse "<<wareId<<", Aisle "<<aisle<<", Bin "<<bin<<", Rack "<<rack<<": "<<item.itemName<<" (ID: "<<item.itemId<<"), Quantity: "<<item.quantity<<endl;\
        \}\
        else\
        \{\
            cout<<"No items found in warehouse "<<wareId<<", Aisle "<<aisle<<", Bin "<<bin<<", Rack "<<rack<<endl;\
        \}\
    \}\
    \
    //Display all items in inventory\
    void displayInventory(int wareId) const\
    \{\
        auto wareIt = warehouses.find(wareId);\
        if(wareIt == warehouses.end())\
        \{\
            cout<<"Warehouse "<<wareId<<" doesnot exist"<<endl;\
            return;\
        \}\
        const Warehouse& ware = wareIt->second;\
        cout<<"Inventory for warehouse "<<wareId<<" ("<<ware.wName<<")"<<endl;\
        for(const auto& [aisleId, aisle] : ware.aisles)\
        \{\
            for(const auto& [binId, bin]:aisle.bins)\
            \{\
                for(const auto& [rackId, rack]: bin.racks)\
                \{\
                    for(const auto& [itemId, item]:rack.items)\
                    \{\
                        cout<<"Aisle "<<aisleId<<", Bin "<<binId<<", Rack "<<rackId<<": ";\
                        cout<<"Item id: "<<item.itemId <<", Name"<<item.itemName;\
                        cout<<", Quantity "<<item.quantity<<", Price "<<item.price<<endl;\
                    \}\
                \}\
            \}\
        \}\
    \}\
    \
    //Low stock alert\
    void checkLowStock(int wareId, int aisle, int bin, int rack, int id) \
    \{\
        auto wareIt = warehouses.find(wareId);\
        if(wareIt != warehouses.end())\
        \{\
            const auto& itemIt = wareIt->second.aisles[aisle].bins[bin].racks[rack].items.find(id);\
            if(itemIt != wareIt->second.aisles[aisle].bins[bin].racks[rack].items.end() && \
            itemIt->second.quantity < lowStockThreshhold)\
            \{\
                cout<<"Low Stock Alert: "<<itemIt->second.itemName<<" in warehouse "<<wareId<<", Aisle "<<aisle<<", Bin "<<bin<<", Rack "<<rack<<", Quantity: "<<itemIt->second.quantity<< endl;\
            \}\
        \}\
    \}\
    \
    //Set low stock threshold\
    void setLowStockThreshhold(int threshhold)\
    \{\
        lowStockThreshhold = threshhold;\
    \}\
\};\
\
int main()\
\{\
    InventorySystem invent;\
    invent.setLowStockThreshhold(10);\
    //addupdateitem(WareId, Aisle id, bin id, rack id, item id, item name, quantity, price)\
    invent.addUpdateItem(1, 2, 0, 1, 1003, "Macbook Pro", 5, 123000.00);\
    invent.addUpdateItem(1, 3, 0, 1, 1004, "Apple Smart Watch 5", 20, 47000.00);\
    invent.addUpdateItem(1, 3, 0, 2, 1005, "Apple iPhone 15", 50, 85500.00);\
    //Display inventory present in warehouse\
    invent.displayInventory(1);\
    //int wareId, int aisle, int bin, int rack, int itemid\
    invent.removeItem(1, 3, 0, 1, 1003);\
    //int wareId, int aisle, int bin, int rack, int itemid\
    invent.checkLowStock(1, 2, 0, 1, 1003);\
    return 0;\
\}}
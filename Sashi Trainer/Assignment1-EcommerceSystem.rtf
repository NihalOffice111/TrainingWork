{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <iostream>\
#include <string>\
#include <vector>\
#include <memory>\
\
using namespace std;\
\
// Abstract Payment class (Abstraction and Polymorphism)\
class Payment \{\
public:\
    virtual bool processPayment(double amount) = 0;  // Pure virtual function\
    virtual ~Payment() \{\}  // Virtual destructor\
\};\
\
// Concrete CreditCardPayment class (Inheritance)\
class CreditCardPayment : public Payment \{\
public:\
    bool processPayment(double amount) override \{\
        cout << "Processing credit card payment of " << amount << endl;\
        // Simulate successful payment processing\
        return true;\
    \}\
\};\
\
// Concrete PayPalPayment class (Inheritance)\
class PayPalPayment : public Payment \{\
public:\
    bool processPayment(double amount) override \{\
        cout << "Processing PayPal payment of " << amount << endl;\
        // Simulate successful payment processing\
        return true;\
    \}\
\};\
\
// Product class (Encapsulation)\
class Product \{\
private:\
    int productId;\
    string name;\
    double price;\
    int stock;\
\
public:\
    Product(int id, string name, double price, int stock) \
        : productId(id), name(name), price(price), stock(stock) \{\}\
\
    int getId() const \{ return productId; \}\
    string getName() const \{ return name; \}\
    double getPrice() const \{ return price; \}\
    int getStock() const \{ return stock; \}\
\
    void reduceStock(int quantity) \{\
        if (quantity <= stock) \{\
            stock -= quantity;\
        \}\
    \}\
\
    void displayProduct() const \{\
        cout << "Product ID: " << productId << ", Name: " << name \
             << ", Price: " << price << ", Stock: " << stock << endl;\
    \}\
\};\
\
// User class\
class User \{\
private:\
    int userId;\
    string username;\
\
public:\
    User(int id, string name) : userId(id), username(name) \{\}\
\
    int getId() const \{ return userId; \}\
    string getUsername() const \{ return username; \}\
\};\
\
// Cart class\
class Cart \{\
private:\
    vector<pair<Product, int>> items;  // Pair of Product and quantity\
\
public:\
    void addProduct(const Product &product, int quantity) \{\
        items.push_back(make_pair(product, quantity));\
    \}\
\
    const vector<pair<Product, int>>& getItems() const \{ return items; \}\
\};\
\
// Order class\
class Order \{\
private:\
    int orderId;\
    User user;\
    Cart cart;\
    double totalAmount;\
\
public:\
    Order(int id, const User &user, const Cart &cart) \
        : orderId(id), user(user), cart(cart), totalAmount(0) \{\
        calculateTotal();\
    \}\
\
    void calculateTotal() \{\
        for (const auto &item : cart.getItems()) \{\
            totalAmount += item.first.getPrice() * item.second;\
        \}\
    \}\
\
    double getTotalAmount() const \{ return totalAmount; \}\
\
    void displayOrder() const \{\
        cout << "Order ID: " << orderId << "\\nUser: " << user.getUsername() \
             << "\\nItems:\\n";\
        for (const auto &item : cart.getItems()) \{\
            cout << "- " << item.first.getName() << " x" << item.second \
                 << " = $" << item.first.getPrice() * item.second << endl;\
        \}\
        cout << "Total Amount: $" << totalAmount << endl;\
    \}\
\};\
\
// E-commerce System class\
class ECommerceSystem \{\
private:\
    vector<Product> products;\
    vector<User> users;\
    vector<Order> orders;\
    int orderCounter;\
\
public:\
    ECommerceSystem() : orderCounter(1) \{\}\
\
    void addProduct(const Product &product) \{\
        products.push_back(product);\
    \}\
\
    void addUser(const User &user) \{\
        users.push_back(user);\
    \}\
\
    Product* findProductById(int productId) \{\
        for (auto &product : products) \{\
            if (product.getId() == productId) return &product;\
        \}\
        return nullptr;\
    \}\
\
    void checkout(User &user, Cart &cart, Payment &paymentMethod) \{\
        Order order(orderCounter++, user, cart);\
        double totalAmount = order.getTotalAmount();\
\
        if (paymentMethod.processPayment(totalAmount)) \{\
            orders.push_back(order); // Store the successful order\
            order.displayOrder();\
            cout << "Order placed successfully!" << endl;\
        \} else \{\
            cout << "Payment failed. Order not placed." << endl;\
        \}\
    \}\
\};\
\
// Main function to demonstrate the system\
int main() \{\
    ECommerceSystem system;\
\
    // Adding products\
    system.addProduct(Product(1, "iPhone 15 Pro Max", 12000.00, \
    10));\
    system.addProduct(Product(2, "Wireless Mouse", 200.00, 20));\
\
    // Adding a user\
    User user(1, "Sashi");\
    system.addUser(user);\
\
    // Creating a cart for the user\
    Cart cart;\
    Product *laptop = system.findProductById(1);\
    if (laptop) cart.addProduct(*laptop, 1);\
\
    Product *smartphone = system.findProductById(2);\
    if (smartphone) cart.addProduct(*smartphone, 2);\
\
    // Choosing a payment method and checking out\
    CreditCardPayment creditCard;\
    system.checkout(user, cart, creditCard);\
\
    return 0;\
\}}